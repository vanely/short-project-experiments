apiVersion: batch/v1
kind: CronJob
metadata:
  name: postgres-backup-cronjob
  namespace: default
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
          - name: postgres-backup
            image: postgres:15-alpine
            command:
            - /bin/sh
            - -c
            - |
              #!/bin/sh
              set -e
              
              # Configuration
              BACKUP_DIR="/backups/postgres"
              POSTGRES_DB="todo_db"
              POSTGRES_USER="todo_user"
              POSTGRES_PASSWORD="todo_password"
              DATE_FORMAT=$(date +"%Y%m%d_%H%M%S")
              BACKUP_NAME="postgres_backup_full_${DATE_FORMAT}"
              
              echo "[$(date)] Starting PostgreSQL backup..."
              
              # Create backup directory
              mkdir -p "$BACKUP_DIR/full"
              mkdir -p "$BACKUP_DIR/logs"
              
              # Wait for PostgreSQL to be ready
              echo "[$(date)] Waiting for PostgreSQL to be ready..."
              until pg_isready -h postgres -U "$POSTGRES_USER" -d "$POSTGRES_DB"; do
                sleep 5
              done
              
              # Create full backup
              echo "[$(date)] Creating full backup..."
              pg_dump \
                -h postgres \
                -U "$POSTGRES_USER" \
                -d "$POSTGRES_DB" \
                --verbose \
                --clean \
                --if-exists \
                --create \
                --no-owner \
                --no-privileges \
                --format=custom \
                --file="$BACKUP_DIR/full/${BACKUP_NAME}.dump"
              
              # Compress backup
              echo "[$(date)] Compressing backup..."
              gzip "$BACKUP_DIR/full/${BACKUP_NAME}.dump"
              
              # Verify backup
              echo "[$(date)] Verifying backup..."
              gunzip -c "$BACKUP_DIR/full/${BACKUP_NAME}.dump.gz" | pg_restore --list > /dev/null
              
              # Cleanup old backups (keep last 30 days)
              echo "[$(date)] Cleaning up old backups..."
              find "$BACKUP_DIR/full" -name "*.dump.gz" -mtime +30 -delete
              
              # Generate report
              echo "[$(date)] Generating backup report..."
              {
                echo "=== PostgreSQL Backup Report ==="
                echo "Date: $(date)"
                echo "Backup: $BACKUP_DIR/full/${BACKUP_NAME}.dump.gz"
                echo "Size: $(du -h "$BACKUP_DIR/full/${BACKUP_NAME}.dump.gz" | cut -f1)"
                echo "Total backups: $(find "$BACKUP_DIR/full" -name "*.dump.gz" | wc -l)"
              } > "$BACKUP_DIR/logs/backup_report_${DATE_FORMAT}.log"
              
              echo "[$(date)] Backup completed successfully"
            env:
            - name: PGPASSWORD
              value: "todo_password"
            volumeMounts:
            - name: backup-storage
              mountPath: /backups
            - name: postgres-backup-script
              mountPath: /scripts
          volumes:
          - name: backup-storage
            persistentVolumeClaim:
              claimName: postgres-backup-pvc
          - name: postgres-backup-script
            configMap:
              name: postgres-backup-script
---
# PVC for backup storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-backup-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard
---
# ConfigMap for backup script
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-backup-script
data:
  backup.sh: |
    #!/bin/sh
    set -e
    
    # Configuration
    BACKUP_DIR="/backups/postgres"
    POSTGRES_DB="todo_db"
    POSTGRES_USER="todo_user"
    POSTGRES_PASSWORD="todo_password"
    DATE_FORMAT=$(date +"%Y%m%d_%H%M%S")
    BACKUP_NAME="postgres_backup_full_${DATE_FORMAT}"
    
    echo "[$(date)] Starting PostgreSQL backup..."
    
    # Create backup directory
    mkdir -p "$BACKUP_DIR/full"
    mkdir -p "$BACKUP_DIR/logs"
    
    # Wait for PostgreSQL to be ready
    echo "[$(date)] Waiting for PostgreSQL to be ready..."
    until pg_isready -h postgres -U "$POSTGRES_USER" -d "$POSTGRES_DB"; do
      sleep 5
    done
    
    # Create full backup
    echo "[$(date)] Creating full backup..."
    pg_dump \
      -h postgres \
      -U "$POSTGRES_USER" \
      -d "$POSTGRES_DB" \
      --verbose \
      --clean \
      --if-exists \
      --create \
      --no-owner \
      --no-privileges \
      --format=custom \
      --file="$BACKUP_DIR/full/${BACKUP_NAME}.dump"
    
    # Compress backup
    echo "[$(date)] Compressing backup..."
    gzip "$BACKUP_DIR/full/${BACKUP_NAME}.dump"
    
    # Verify backup
    echo "[$(date)] Verifying backup..."
    gunzip -c "$BACKUP_DIR/full/${BACKUP_NAME}.dump.gz" | pg_restore --list > /dev/null
    
    # Cleanup old backups (keep last 30 days)
    echo "[$(date)] Cleaning up old backups..."
    find "$BACKUP_DIR/full" -name "*.dump.gz" -mtime +30 -delete
    
    # Generate report
    echo "[$(date)] Generating backup report..."
    {
      echo "=== PostgreSQL Backup Report ==="
      echo "Date: $(date)"
      echo "Backup: $BACKUP_DIR/full/${BACKUP_NAME}.dump.gz"
      echo "Size: $(du -h "$BACKUP_DIR/full/${BACKUP_NAME}.dump.gz" | cut -f1)"
      echo "Total backups: $(find "$BACKUP_DIR/full" -name "*.dump.gz" | wc -l)"
    } > "$BACKUP_DIR/logs/backup_report_${DATE_FORMAT}.log"
    
    echo "[$(date)] Backup completed successfully"
---
# Service for backup monitoring
apiVersion: v1
kind: Service
metadata:
  name: postgres-backup-service
spec:
  selector:
    app: postgres-backup
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
  type: ClusterIP 